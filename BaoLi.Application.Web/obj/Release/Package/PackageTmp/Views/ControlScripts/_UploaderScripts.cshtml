@model Movit.MvcCotrols.UploaderModel
<script>

    files_@{@Model.name} = [];
    $list_@{@Model.name} = $('#thelist_@{@Model.name}');
</script>

<div id="@Model.name" class="wu-example">
    <!--用来存放文件信息-->
    <ul id="thelist_@{@Model.name}" class="list-group">
        @{
            if (Model.attachments != null && Model.attachments.Count > 0)
            {
                foreach (var item in Model.attachments)
                {

                    <li id="WU_FILE_@{@item.AttachmentID}" class="list-group-item">
                        <span class="fileName" datavalue="@{@item.AttachmentName}">@item.AttachmentName</span><span class="state" style=" margin-left: 10px;"></span>
                        <span class="filepath" datavalue="1" style=" margin-left: 10px;display: none;">@item.Path</span>
                        <span class="download" style="margin-left:20px;">
                            <a href="../../PublicInfoManage/Upload/DownFile?filePath=@{@item.Path}&amp;fileName=@{@item.AttachmentName}">下载</a>
                        </span>
                        <span class="webuploadDelbtn" style="float: right;">删除<span></span></span>
                        <div class="progress progress-striped active" style="display: none;">
                            <div class="progress-bar" role="progressbar" style="width: 100%;"></div>
                        </div>
                    </li>
                    <script>

                        //增加列表存储
                        files_@{@Model.name}.push({ status: true, filepath: "@Html.Raw(item.Path)", filename: "@Html.Raw(item.AttachmentName)", objecttype: "@{@item.ObjectType}", Id: "@{@item.AttachmentID}" });
                        $list_@{@Model.name} = $('#thelist_@{@Model.name}');//这里代码要优化这里现在效率很低
                    </script>
                }

            }

        }
    </ul>
    <div class="uploader-list"></div>
    <div class="filesbtns">
        <div id="picker_@{@Model.name}" style="float:left;">@Model.selectFileButtonText</div>
        <input id="ctlBtn_@{@Model.name}" type="button" value="@{@Model.stratUpFileButtonText}" class="btn btn-default" style="width:78px;height:37px;margin-left:10px;" />
    </div>
</div>

<script>

    var applicationPath = window.applicationPath === "" ? "" : window.applicationPath || "../../";
    var GUID_@{@Model.name} = WebUploader.Base.guid();//一个GUID
    $(function () {
        initUpload_@{@Model.name}();
        files_@{@Model.name}.push({"objectType":'@Model.objectType'});
    })
    //验证是否有值，用于必填验证
    function IsEmpty@{@Model.name}(){
        var fileCount=files_@{@Model.name}.length;
        if(fileCount>1){
            return false;
        }else{
            return true;
        }

    }
    //初始化上传控件
    function initUpload_@{@Model.name}() {
        var $ = jQuery;
        $list_@{@Model.name} = $('#thelist_@{@Model.name}');
        var uploader = WebUploader.create({

            // 选完文件后，是否自动上传。
            auto: false,
            // swf文件路径
            swf: applicationPath + '../Content/scripts/plugins/webuploader/Uploader.swf',
            // 文件接收服务端。
            server: applicationPath + 'PublicInfoManage/Upload/Upload',
            // 选择文件的按钮。可选。
            // 内部根据当前运行是创建，可能是input元素，也可能是flash.
            pick:{
                id :'#picker_@{@Model.name}',
                multiple:@Model.multiple,
            },
            duplicate:false,
            fileNumLimit:@Model.fileCount,
            chunked: true,//开始分片上传
            chunkSize: 2048000,//每一片的大小
            formData: {
                guid: GUID_@{@Model.name}, //自定义参数，待会儿解释
            },
            fileSingleSizeLimit: @Model.fileSize,//1073741824=1GB，1610612736=1.5GB，2147483648=2GB
            accept: {
                title: '',
                extensions: '@Model.allowedFileExtensions'
            },
            // 不压缩image, 默认如果是jpeg，文件上传前会压缩一把再上传！
            resize: false
        });
        // 当有文件被添加进队列的时候
        uploader.on('fileQueued', function (file) {
            $list_@{@Model.name}.append('<li id="' + file.id + '" class="list-group-item">' +
                '<span class="fileName" dataValue="">' + file.name + '</span>' +
                '<span class="state"  style=\" margin-left: 10px;\">等待上传</span>' +
                '<span class="filepath" dataValue="0" style=\" margin-left: 10px;display: none;\"></span>' +
                '<span class="download" style="margin-left:20px;"></span>' +
                '<span class="webuploadDelbtn"style=\"float: right;display: none; \">删除<span>' +
            '</li>');
        });
        uploader.on("error", function (type) {
            if (type == "Q_TYPE_DENIED") {
                dialogAlert("格式不支持!", 2);
            } else if (type == "F_EXCEED_SIZE") {
                dialogAlert("文件过大!", 2);
            }
            //else {
            //    dialogAlert("上传出错！请检查后重新上传！错误代码" + type, 2);
            //}
        });
        // 文件上传过程中创建进度条实时显示。
        uploader.on('uploadProgress', function (file, percentage) {
            var $li = $('#' + file.id),
        $percent = $li.find('.progress .progress-bar');
            // 避免重复创建
            if (!$percent.length) {
                $percent = $('<div class="progress progress-striped active">' +
                  '<div class="progress-bar" role="progressbar" style="width: 0%">' +
                  '</div>' +
                '</div>').appendTo($li).find('.progress-bar');
            }

            $li.find('span.state').text('上传中');
            $percent.css('width', percentage * 100 + '%');
        });
        //当文件被加入队列之前触发，此事件的handler返回值为false，则此文件不会被添加进入队列。
        uploader.on('beforeFileQueued', function (file) {
            var fileCount = @{@Model.fileCount};
            if(fileCount== 1&& files_@{@Model.name}.length>1){//如果只允许上传一个文件的话，这里要卡一下，不然编辑的时候会有BUG
                dialogAlert("已超过允许上传文件的最大数量!", 2);
                return false;
            }

            @if (!string.IsNullOrEmpty(Model.selectEnvet)) {
                 <text>
            var func = "@{@Model.selectEnvet}";
            if (func != "") {
                var ex = { call: eval("(" + func + ")") };
                var result=  ex.call(file);
            }

            </text>
             }
        });
        //上传之前
        uploader.on('uploadBeforeSend', function (object, data, headers) {

            console.log(data);
        });
        // 文件上传成功，给item添加成功class, 用样式标记上传成功。
        uploader.on('uploadSuccess', function (file, response) {

            var $li = $('#' + file.id);
            $.post('../../PublicInfoManage/Upload/Merge', {
                guid: GUID_@{@Model.name},
                objectType: '@{@Model.objectType}',
                ext: file.ext,
                fileName: file.name,
                fileType: file.type
            }, function (data) {
                $li.find('span.state').html("上传成功");
                $li.find('span.filepath').attr("dataValue", 1);
                $li.find('span.fileName').attr("dataValue", data.filename);
                $li.find('span.fileName').html(data.filename);
                $li.find('span.download').html("<a href=\"../../PublicInfoManage/Upload/DownFile?filePath=" + data.filepath + "&amp;fileName=" + data.filename + "\">下载</a>")
                $li.find('span.webuploadDelbtn').show();
                $li.find('span.filepath').html(data.filepath);
                //增加列表存储
                files_@{@Model.name}.push(data);
                @if (!string.IsNullOrEmpty(Model.uploadedEnvet))
                 {
                     <text>
                var func = "@{@Model.uploadedEnvet}";
                if (func != "") {
                    var ex = { call: eval("(" + func + ")") };
                    var result=  ex.call(data);
                }

                </text>
                 }
            });
        });

        // 文件上传失败，显示上传出错。
        uploader.on('uploadError', function (file, reason) {
            $('#' + file.id).find('p.state').text(reason);
        });

        // 完成上传完了，成功或者失败，先删除进度条。
        uploader.on('uploadComplete', function (file) {

            $('#' + file.id).find('.progress').fadeOut();
        });

        //所有文件上传完毕
        uploader.on("uploadFinished", function (file) {
            //提交表单

        });
        //开始上传
        $("#ctlBtn_@{@Model.name}").click(function () {
            uploader.upload();

        });
        //删除
        $list_@{@Model.name}.on("click", ".webuploadDelbtn", function () {
            debugger;
            var $ele = $(this);
            var id = $ele.parent().attr("id");

            //这里代码现在很有问题  哎 TODO
            try {
                var file = uploader.getFile(id);
                uploader.removeFile(file);
            } catch (e) {

            }

            $ele.parent().remove();
            //移除数组
            var fileName=$ele.parent().find(".fileName").html();
            //因为为了兼容 手动赋值的问题 这里动了点小脑筋，通过别的方法获取名称,其实使用file.name最好 TODO 再想想
            @*var destFile = findFile_@{@Model.name}(file.name)*@
            var fileName=$ele.parent().find(".fileName").html();
            var destFile = findFile_@{@Model.name}(fileName)
            var index = files_@{@Model.name}.indexOf(destFile);
            if (index > -1) {
                files_@{@Model.name}.splice(index, 1);
            }



        }); //查找目标文件
        function findFile_@{@Model.name}(fileName) {
            if (files_@{@Model.name}.length == 0) return;
            for (var i = 0; i < files_@{@Model.name}.length; i++) {
                if (files_@{@Model.name}[i].filename == fileName) {
                    return files_@{@Model.name}[i];
                }
            }
        }
    }

</script>